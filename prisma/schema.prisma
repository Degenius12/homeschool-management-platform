generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(cuid())
  email     String         @unique
  name      String?
  image     String?
  role      String         @default("PARENT")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  families  FamilyMember[]

  @@map("users")
}

model Family {
  id          String         @id @default(cuid())
  name        String
  state       String         @default("TN")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  members     FamilyMember[]
  schoolYears SchoolYear[]
  students    Student[]

  @@map("families")
}

model FamilyMember {
  id        String   @id @default(cuid())
  userId    String
  familyId  String
  role      String   @default("PARENT")
  createdAt DateTime @default(now())
  family    Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, familyId])
  @@map("family_members")
}

model Student {
  id                String             @id @default(cuid())
  firstName         String
  lastName          String
  dateOfBirth       DateTime
  grade             String
  familyId          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  assessments       Assessment[]
  assignments       Assignment[]
  attendanceRecords AttendanceRecord[]
  grades            Grade[]
  family            Family             @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@map("students")
}

model SchoolYear {
  id                String             @id @default(cuid())
  familyId          String
  year              String
  startDate         DateTime
  endDate           DateTime
  daysRequired      Int                @default(180)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  attendanceRecords AttendanceRecord[]
  family            Family             @relation(fields: [familyId], references: [id], onDelete: Cascade)
  subjects          Subject[]

  @@unique([familyId, year])
  @@map("school_years")
}

model Subject {
  id           String       @id @default(cuid())
  name         String
  description  String?
  curriculum   String       @default("TGTB")
  grade        String
  schoolYearId String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assignments  Assignment[]
  lessons      Lesson[]
  schoolYear   SchoolYear   @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)

  @@map("subjects")
}

model Lesson {
  id             String       @id @default(cuid())
  title          String
  description    String?
  lessonNumber   Int?
  estimatedHours Float        @default(1.0)
  subjectId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  assignments    Assignment[]
  subject        Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@map("lessons")
}

model AttendanceRecord {
  id           String     @id @default(cuid())
  studentId    String
  schoolYearId String
  date         DateTime
  status       String     @default("PRESENT")
  hours        Float      @default(4.0)
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, date])
  @@map("attendance_records")
}

model Assignment {
  id           String    @id @default(cuid())
  title        String
  description  String?
  dueDate      DateTime?
  assignedDate DateTime  @default(now())
  studentId    String
  subjectId    String
  lessonId     String?
  type         String    @default("WORKSHEET")
  status       String    @default("NOT_STARTED")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lesson       Lesson?   @relation(fields: [lessonId], references: [id])
  student      Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject      Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  grades       Grade[]

  @@map("assignments")
}

model Grade {
  id           String     @id @default(cuid())
  studentId    String
  assignmentId String
  score        Float?
  percentage   Float?
  letterGrade  String?
  points       Float?
  maxPoints    Float?
  gradedDate   DateTime   @default(now())
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([assignmentId, studentId])
  @@map("grades")
}

model Assessment {
  id          String   @id @default(cuid())
  studentId   String
  type        String
  title       String
  testDate    DateTime
  score       Float?
  maxScore    Float?
  percentile  Float?
  grade       String
  testingYear String
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("assessments")
}

model ComplianceRecord {
  id                  String    @id @default(cuid())
  familyId            String
  schoolYear          String
  noticeOfIntentFiled Boolean   @default(false)
  noticeOfIntentDate  DateTime?
  totalDaysCompleted  Int       @default(0)
  daysRequired        Int       @default(180)
  complianceStatus    String    @default("ON_TRACK")
  testingRequired     Boolean   @default(false)
  testingCompleted    Boolean   @default(false)
  testingDueDate      DateTime?
  recordsLocation     String?
  portfolioCompleted  Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@unique([familyId, schoolYear])
  @@map("compliance_records")
}
