import { NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import jsPDF from 'jspdf'

interface Student {
  id: string
  firstName: string
  lastName: string
  grade: string
  dateOfBirth: string
}

export async function POST(request: Request) {
  try {
    console.log('Report generation API called')
    const { reportType, studentId, period } = await request.json()
    console.log('Request data:', { reportType, studentId, period })
    
    // Get students from database
    let students: Student[]
    if (studentId === 'all') {
      const studentsData = await prisma.student.findMany({
        orderBy: { firstName: 'asc' }
      })
      students = studentsData.map(student => ({
        id: student.id,
        firstName: student.firstName,
        lastName: student.lastName,
        grade: student.grade,
        dateOfBirth: student.dateOfBirth.toISOString().split('T')[0]
      }))
    } else {
      const studentData = await prisma.student.findUnique({
        where: { id: studentId }
      })
      if (!studentData) {
        return NextResponse.json({ error: 'Student not found' }, { status: 404 })
      }
      students = [{
        id: studentData.id,
        firstName: studentData.firstName,
        lastName: studentData.lastName,
        grade: studentData.grade,
        dateOfBirth: studentData.dateOfBirth.toISOString().split('T')[0]
      }]
    }

    if (students.length === 0) {
      console.log('No students found')
      return NextResponse.json({ error: 'No students found' }, { status: 404 })
    }

    console.log('Found students:', students.length)
    
    // Generate PDF
    const pdf = new jsPDF()
    const periodLabel = period === 'current-year' ? 'Current School Year' : period
    console.log('Generating PDF for report type:', reportType)

    switch (reportType) {
      case 'attendance-summary':
        generateAttendanceReport(pdf, students, periodLabel)
        break
      case 'academic-progress':
        generateAcademicReport(pdf, students, periodLabel)
        break
      case 'compliance-report':
        generateComplianceReport(pdf, students, periodLabel)
        break
      case 'transcript':
        generateTranscriptReport(pdf, students, periodLabel)
        break
      default:
        generateAcademicReport(pdf, students, periodLabel)
        break
    }

    // Convert PDF to buffer
    const pdfBuffer = Buffer.from(pdf.output('arraybuffer'))
    
    // Set headers for file download
    const filename = `${reportType}-${new Date().toISOString().split('T')[0]}.pdf`
    
    return new NextResponse(pdfBuffer, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Content-Length': pdfBuffer.length.toString(),
      },
    })

  } catch (error) {
    console.error('Error generating report:', error)
    return NextResponse.json(
      { error: 'Failed to generate report' },
      { status: 500 }
    )
  }
}

function addHeader(pdf: jsPDF, title: string, period: string): void {
  // Title
  pdf.setFontSize(16)
  pdf.setFont('helvetica', 'bold')
  pdf.text(title, 20, 30)
  
  // Period and date
  pdf.setFontSize(10)
  pdf.setFont('helvetica', 'normal')
  pdf.text(`Period: ${period}`, 20, 40)
  pdf.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 50)
  
  // Line separator
  pdf.line(20, 55, 190, 55)
}

function addFooter(pdf: jsPDF): void {
  const pageCount = pdf.getNumberOfPages()
  
  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i)
    pdf.setFontSize(8)
    pdf.setFont('helvetica', 'normal')
    pdf.text(`Page ${i} of ${pageCount}`, 20, 285)
    pdf.text('Generated by Homeschool Management Platform', 140, 285)
  }
}

function generateAttendanceReport(pdf: jsPDF, students: Student[], period: string): void {
  addHeader(pdf, 'Attendance Summary Report', period)
  
  let yPosition = 60
  
  for (const student of students) {
    if (yPosition > 250) {
      pdf.addPage()
      yPosition = 30
    }
    
    // Student header
    pdf.setFontSize(14)
    pdf.setFont('helvetica', 'bold')
    pdf.text(`${student.firstName} ${student.lastName} - Grade ${student.grade}`, 20, yPosition)
    yPosition += 15
    
    // Attendance summary (mock data for now)
    pdf.setFontSize(10)
    pdf.setFont('helvetica', 'normal')
    const attendanceData = [
      'Days Attended: 150 / 180 (83%)',
      'Days Remaining: 30',
      'Average Hours per Day: 5.2',
      'Total Hours Completed: 780',
      'Compliance Status: On Track'
    ]
    
    attendanceData.forEach(line => {
      pdf.text(line, 30, yPosition)
      yPosition += 8
    })
    
    yPosition += 10
  }
  
  addFooter(pdf)
}

function generateAcademicReport(pdf: jsPDF, students: Student[], period: string): void {
  addHeader(pdf, 'Academic Progress Report', period)
  
  let yPosition = 60
  
  for (const student of students) {
    if (yPosition > 240) {
      pdf.addPage()
      yPosition = 30
    }
    
    // Student header
    pdf.setFontSize(14)
    pdf.setFont('helvetica', 'bold')
    pdf.text(`${student.firstName} ${student.lastName} - Grade ${student.grade}`, 20, yPosition)
    yPosition += 15
    
    // Academic subjects (mock data)
    pdf.setFontSize(10)
    pdf.setFont('helvetica', 'normal')
    const subjects = [
      { name: 'Mathematics', progress: '85%', grade: 'A-' },
      { name: 'Language Arts', progress: '92%', grade: 'A' },
      { name: 'Science', progress: '78%', grade: 'B+' },
      { name: 'Social Studies', progress: '88%', grade: 'A-' },
      { name: 'Art', progress: '95%', grade: 'A' }
    ]
    
    subjects.forEach(subject => {
      pdf.text(`${subject.name}: ${subject.progress} (${subject.grade})`, 30, yPosition)
      yPosition += 8
    })
    
    yPosition += 15
  }
  
  addFooter(pdf)
}

function generateComplianceReport(pdf: jsPDF, students: Student[], period: string): void {
  addHeader(pdf, 'Tennessee Compliance Report', period)
  
  let yPosition = 60
  
  // Compliance overview
  pdf.setFontSize(12)
  pdf.setFont('helvetica', 'bold')
  pdf.text('Compliance Overview', 20, yPosition)
  yPosition += 15
  
  pdf.setFontSize(10)
  pdf.setFont('helvetica', 'normal')
  const complianceItems = [
    '✓ Notice of Intent Filed',
    '✓ 180-Day Attendance Requirement Met',
    '✓ Required Subjects Taught (4 hours daily)',
    '✓ Testing Requirements Completed',
    '✓ Records Maintained'
  ]
  
  complianceItems.forEach(item => {
    pdf.text(item, 30, yPosition)
    yPosition += 8
  })
  
  yPosition += 20
  
  // Student details
  for (const student of students) {
    if (yPosition > 240) {
      pdf.addPage()
      yPosition = 30
    }
    
    pdf.setFontSize(12)
    pdf.setFont('helvetica', 'bold')
    pdf.text(`${student.firstName} ${student.lastName}`, 20, yPosition)
    yPosition += 10
    
    pdf.setFontSize(10)
    pdf.setFont('helvetica', 'normal')
    pdf.text(`Grade: ${student.grade}`, 30, yPosition)
    yPosition += 8
    pdf.text(`Date of Birth: ${student.dateOfBirth}`, 30, yPosition)
    yPosition += 8
    pdf.text('Attendance: 150/180 days (83%)', 30, yPosition)
    yPosition += 8
    pdf.text('Status: Compliant', 30, yPosition)
    yPosition += 15
  }
  
  addFooter(pdf)
}

function generateTranscriptReport(pdf: jsPDF, students: Student[], period: string): void {
  addHeader(pdf, 'Official Transcript', period)
  
  let yPosition = 60
  
  for (const student of students) {
    if (yPosition > 200) {
      pdf.addPage()
      yPosition = 30
    }
    
    // Student info
    pdf.setFontSize(14)
    pdf.setFont('helvetica', 'bold')
    pdf.text(`${student.firstName} ${student.lastName}`, 20, yPosition)
    yPosition += 10
    
    pdf.setFontSize(10)
    pdf.setFont('helvetica', 'normal')
    pdf.text(`Grade: ${student.grade}`, 20, yPosition)
    yPosition += 8
    pdf.text(`Date of Birth: ${student.dateOfBirth}`, 20, yPosition)
    yPosition += 15
    
    // Transcript data (mock)
    pdf.setFontSize(12)
    pdf.setFont('helvetica', 'bold')
    pdf.text('Academic Record', 20, yPosition)
    yPosition += 10
    
    pdf.setFontSize(10)
    pdf.setFont('helvetica', 'normal')
    const courses = [
      { course: 'Mathematics 5', credit: '1.0', grade: 'A-' },
      { course: 'English Language Arts 5', credit: '1.0', grade: 'A' },
      { course: 'Science 5', credit: '1.0', grade: 'B+' },
      { course: 'Social Studies 5', credit: '1.0', grade: 'A-' },
      { course: 'Art', credit: '0.5', grade: 'A' },
      { course: 'Physical Education', credit: '0.5', grade: 'A' }
    ]
    
    // Table headers
    pdf.text('Course', 30, yPosition)
    pdf.text('Credits', 120, yPosition)
    pdf.text('Grade', 160, yPosition)
    yPosition += 8
    
    courses.forEach(course => {
      pdf.text(course.course, 30, yPosition)
      pdf.text(course.credit, 120, yPosition)
      pdf.text(course.grade, 160, yPosition)
      yPosition += 8
    })
    
    yPosition += 15
  }
  
  addFooter(pdf)
}